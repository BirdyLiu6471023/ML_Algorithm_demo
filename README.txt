 Question 2 code: # k_means method is implemented by myself: How to run code:     > sample data:     X, y = make_circles(n_samples=1000, factor=0.3, noise=0.05, random_state=0)        > training:    1. km_t1 = K_means_V1(k = 2)    -- k: integer, num of cluster you want to train.         2. km_t1.fit(X)        3. km_t1.train(echos = 10, transform = True, r =6)     -- echos: integer, num of iterations;    -- transform: boolean, True if you need to transform it into felxible version;     -- r: integer, num of neighbors you create the lapaliance matrix.Question 3 code: How to run code:         > test sample data:     from sklearn.datasets import make_moons    X, y = make_moons(20, noise=.05, random_state=0)        > training:     1. dr = DimensionReduction(d = 2)    -- d: integer, output dimension;        2. dr.fit(X)        3. dr.create_path_v2(num_neighbors = 3)    -- num_neighbors: integer        4. dr.train(echos = 10)    -- echos: integer