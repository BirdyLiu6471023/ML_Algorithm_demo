Parameters:         -------------------------------------------    Step1: Initialization        Example:     test_normal = NeuralNetwork(layersize = [10,10],init_value = 0.01,learningrate = 0.1, optimizer = "normal", activation = "sigmoid")    --------         layersize: hidden layer neural size, e.g. [256,256] means two hidden layer, 256 for each;    optimizer: adam or normal;    activation: "linear" or "sigmoid";    learning rate: float;     loss bound: float, which control the loss to below this threhold;    stop rate: float, which control the sample stop when it converge.        --------------------------------------------    Step2: Fit        Example:     test_normal.fit(x_t,y_t)    --------        Input: X: array[[],[],...[]],            Y: array[[],[],...[]].         --------------------------------------------    Step3: Train        Example:     1) for very simple case:     test_normal.simple_train(echos = 20000, verbose = 5000)    2) for picture case which need to draw batchsize:     test_normal.train(batchsize = 3, more_echos = 40000-image1_nn1.echos, verbose = 100)    ---------        more_echos: integer, which ask the model to train more echos based on previous training;    verbose: integer, defualt, 100, which output loss every 100 echos;    batchsize: integer, default 3, define how many samples training once in a echo;    inner_iteration: integer, default, float("inf"), echo stop when while loops reach to inner_iteration.        --------------------------------------------    Step4: Prediction        Example:     1) for simple test case:     pred = test_normal.predict(x_t, show_pred = True)        2) for image:     image1_nn2.predict(x1_s,ishape = (100,76),setting = True, ishow = True)    ----------    x_s: predictors, array[[],[],...[]];    ishape: image shape, e.g. [100,76], input if it is image data;     show_pred: boolean, default, False, if show the prediction value;    ishow: boolean, default, False, if show the picture;     rescale_value: integer, for image plotting setting, default, 255;     setting: boolean, default False, if output the model parameter setting;     image_type: string, default "gray", control the type of output image;     plt_title: string, if "echos", then output the echos as title; if other string, then title as your defined string.            Step5: Prediction Loss:         Example:     nn.pred_loss(self, y_s, loss_type = "both")    ----------        y_s: target, array[[],[],...[]];   loss_type: string, "average", "total", "both"      